---

- name: Cria o diretorio de instalacao 
  file:
    path: "{{ ROOT_DATA_DIR }}"
    state: directory
    mode: '0755'

# 2. Configuração dos certificados
- name: Criar diretório para certificados
  file:
    path: "{{ ssl_dir }}"
    state: directory
    mode: 0755

- name: Gerar chave privada da CA
  command: |
    openssl genrsa -out {{ ca_key_path }} 4096
  
- name:  Gerar certificado da CA
  command: | 
    openssl req -x509 -new -nodes -sha256 -days 3650 \
    -subj "/C={{ country }}/ST={{ state }}/L={{ locality }}/O={{ organization }}/OU={{ unit }}/CN={{ harbor_domain }}/emailAddress={{ email }}" \
    -key {{ ca_key_path }}  \
    -out {{ ca_crt_path }} 

- name: Gerar chave privada do Harbor
  command: |
    openssl genrsa -out {{ harbor_key_path }} 4096

- name: Gerar CSR para o Harbor
  command: |
    openssl req -sha512 -new \
    -subj "/C={{ country }}/ST={{ state }}/L={{ locality }}/O={{ organization }}/OU={{ unit }}/CN={{ harbor_domain }}/emailAddress={{ email }}" \
    -key {{ harbor_key_path }} \
    -out {{ harbor_csr_path }}

- name: Gerar arquivo v3.ext com extensões x509 v3
  copy:
    dest: "{{ ssl_dir }}/v3.ext"
    content: |
      authorityKeyIdentifier=keyid,issuer
      basicConstraints=CA:FALSE
      keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
      extendedKeyUsage = serverAuth
      subjectAltName = @alt_names

      [alt_names]
      DNS.1={{ harbor_domain }}
      DNS.2=harbor
      DNS.3=harbor.local
      IP.1=192.168.1.100
    mode: 0644

- name: Gerar o CRT do Harbor
  command: |
    openssl x509 -req -sha512 -days 3650 \
    -extfile {{ ssl_dir }}/v3.ext \
    -CA {{ ca_crt_path }} -CAkey {{ ca_key_path }} -CAcreateserial \
    -in {{ harbor_csr_path }} \
    -out {{ harbor_crt_path }} 

- name: Converter CRT do Harbor para CERT
  command: |
    openssl x509 -inform PEM \
    -in {{ harbor_crt_path }} \
    -out {{ ssl_dir }}/{{ harbor_domain }}.cert

- name: Criar diretório para os certificados do Docker
  file:
    path: "{{ docker_cert_dir }}/{{ harbor_domain }}"
    state: directory
    mode: '0755'

- name: Copiar CA.crt, Harbor.key e Harbor.cert para o Docker
  block:
  - name: Copia
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      remote_src: yes
      mode: 0644
    loop:
      - { src: "{{ ca_crt_path }}", dest: "{{ docker_cert_dir }}/{{ harbor_domain }}/ca.crt" }
      - { src: "{{ harbor_key_path }}", dest: "{{ docker_cert_dir }}/{{ harbor_domain }}/{{ harbor_domain }}.key" }
      - { src: "{{ ssl_dir }}/{{ harbor_domain }}.cert", dest: "{{ docker_cert_dir }}/{{ harbor_domain }}/{{ harbor_domain }}.cert" }
    notify:
      - restart docker

  - name: Reiniciar Docker
    meta: flush_handlers
    vars:
      ansible_connection: local

# 3. Instalação do Harbor
- name: Baixar Harbor
  get_url:
    url: "https://github.com/goharbor/harbor/releases/download/v{{ harbor_version }}/harbor-offline-installer-v{{ harbor_version }}.tgz"
    dest: "/tmp/harbor.tgz"

- name: Extrair Harbor
  unarchive:
    src: "/tmp/harbor.tgz"
    dest: "{{ ROOT_DATA_DIR }}"
    remote_src: yes
    extra_opts: ["--strip-components=1"]

- name: Configurar harbor.yml
  template:
    src: "harbor.yml.j2"
    dest: "{{ ROOT_DATA_DIR }}/harbor.yml"
    mode: 0644

- name: Executar script de instalação
  shell: |
    export TERM=xterm
    ./install.sh --with-trivy
  args:
    chdir: "{{ ROOT_DATA_DIR }}"

- name: Copiar certificados para Ubuntu
  shell: |
    cp {{ harbor_domain }}.crt /usr/local/share/ca-certificates/{{ harbor_domain }}.crt |
    update-ca-certificates
  args:
    chdir: "{{ ROOT_DATA_DIR }}"
  register: harbor_reconfigure

# 4. Verificação de conformidade do Harbor e Docker
- name: Verificar containers do Harbor
  command: docker compose ps
  args:
    chdir: "{{ ROOT_DATA_DIR }}"
  register: harbor_ps
  changed_when: true

- name: Mostrar status dos containers
  debug:
    var: harbor_ps.stdout_lines

