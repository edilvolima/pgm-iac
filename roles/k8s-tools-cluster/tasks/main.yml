---
- name: Garantir que utilitários de descompressão estejam instalados (Debian/Ubuntu)
  ansible.builtin.apt:
    name:
      - tar
      - gzip
      - bzip2
      - xz-utils
      - unzip
      - zstd
    state: present
    update_cache: yes # Garantir que o cache de pacotes seja atualizado
  become: yes # Necessário para instalar pacotes
  when: "ansible_facts['distribution'] == 'Ubuntu' or ansible_facts['distribution'] == 'Debian'"
  
# ... (tasks existentes para criação de usuário, sudo, implantação RKE)
- name: Criar usuário 'pgm-user'
  user:
    name: pgm-user
    groups: docker
    append: yes
    shell: /bin/bash
    state: present
  become: true

- name: Configurar sudo sem senha para 'pgm-user'
  copy:
    dest: /etc/sudoers.d/pgm-user
    content: "pgm-user ALL=(ALL) NOPASSWD: ALL"
  become: true

- name: Garantir que o diretório $HOME/.kube exista
  file:
    path: "{{ ansible_env.HOME }}/.kube" # Usar ansible_env.HOME para robustez
    state: directory
    mode: '0755'
  run_once: true # Deve rodar uma vez, geralmente no nó de controle ou onde kubectl será usado
  become: true # Geralmente o diretório home do usuário, mas depende do usuário de conexão Ansible

- include_tasks: deploy-rke.yml
  # Isso deve alvejar o nó do control plane ou run_once se o rke for executado do master ansible
  # Por simplicidade, vamos assumir que o play alveja k8s-tools-controlplane para estas tasks

- include_tasks: verificacao-rke.yml
  # Alvejamento similar ao deploy-rke.yml

- name: Implantar Rancher
  include_tasks: deploy-rancher.yml
  # Isso também deve alvejar o(s) nó(s) k8s-tools-controlplane
  # As tasks dentro de deploy-rancher.yml usam `when: inventory_hostname in groups['k8s-tools-controlplane'][0]`

- name: Importar Cluster k8s-desenv para o Rancher k8s-tools (Orientação)
  include_tasks: manage_desenv_cluster.yml
  # Isso também deve alvejar o(s) nó(s) k8s-tools-controlplane
  when: "inventory_hostname in groups['k8s-tools-controlplane'][0]" # Garantir que rode no host correto
